Basic Node and Express - Use body-parser to Parse POST Requests
Besides GET there is another common http verb, it is POST. POST is the default method used to send client data with HTML forms. In the REST convention POST is used to send data to create new items in the database (a new user, or a new blog post). We don’t have a database in this project, but we are going to learn how to handle POST requests anyway.

In these kind of requests the data doesn’t appear in the URL, it is hidden in the request body. This is a part of the HTML request, also called payload. Since HTML is text based, even if you don’t see the data, it doesn’t mean that they are secret. The raw content of an HTTP POST request is shown below:

POST /path/subpath HTTP/1.0
From: john@example.com
User-Agent: someBrowser/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 20
name=John+Doe&age=25
As you can see the body is encoded like the query string. This is the default format used by HTML forms. With Ajax we can also use JSON to be able to handle data having a more complex structure. There is also another type of encoding: multipart/form-data. This one is used to upload binary files.

In this exercise we will use an urlencoded body.

To parse the data coming from POST requests, you have to install a package: the body-parser. This package allows you to use a series of middleware, which can decode data in different formats. See the docs here.

Install the body-parser module in your package.json. Then require it at the top of the file. Store it in a variable named bodyParser.

The middleware to handle url encoded data is returned by bodyParser.urlencoded({extended: false}). extended=false is a configuration option that tells the parser to use the classic encoding. When using it, values can be only strings or arrays. The extended version allows more data flexibility, but it is outmatched by JSON. Pass to app.use() the function returned by the previous method call. As usual, the middleware must be mounted before all the routes which need it.

Exercise: (app.js)


var express = require('express');
var path = require('path');
var bodyParser = require('body-parser');

var app = express();




// --> 7)  Mount the Logger middleware here
app.use((req, res, next)=>{
  console.log(req.method + ' ' + req.path + ' - ' + req.ip);
  next();
});

// --> 11)  Mount the body-parser middleware  here
// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: false }))

/** 1) Meet the node console. */


/** 2) A first working Express Server */


/** 3) Serve an HTML file */
app.get('/',  function(req, res){
  res.sendFile(path.join(__dirname + '/views/index.html'));
})

/** 4) Serve static assets  */
app.use(express.static(__dirname + '/public'));

/** 5) serve JSON on a specific route */
app.get('/json', function(req,res){
  if (process.env.MESSAGE_STYLE == 'uppercase'){
    res.json({"message": "HELLO JSON"});
  }
  res.json({"message": "Hello json"});
});

/** 6) Use the .env file to configure the app */
 
 
/** 7) Root-level Middleware - A logger */
//  place it before all the routes !


/** 8) Chaining middleware. A Time server */
  app.get('/now', (req, res, next)=>{
      req.time = new Date().toString();
      next();
    },(req,res)=>{
      res.json({time: req.time});
    }
  );

/** 9)  Get input from client - Route parameters */
app.get('/:word/echo', (req,res)=>{
  res.json({echo: req.params.word});
});

/** 10) Get input from client - Query parameters */
// /name?first=<firstname>&last=<lastname>
app.get('/name',(req, res)=>{
  let first = req.query.first;
  let last = req.query.last;
  res.json({name: `${first} ${last}`});
});
  
/** 11) Get ready for POST Requests - the `body-parser` */
// place it before all the routes !


/** 12) Get data form POST  */



// This would be part of the basic setup of an Express app
// but to allow FCC to run tests, the server is already active
/** app.listen(process.env.PORT || 3000 ); */

//---------- DO NOT EDIT BELOW THIS LINE --------------------

 module.exports = app;
